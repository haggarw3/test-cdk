import * as cloudwatch from '@aws-cdk/aws-cloudwatch';
import * as ec2 from '@aws-cdk/aws-ec2';
import * as iam from '@aws-cdk/aws-iam';
import * as cdk from '@aws-cdk/core';
import { Construct } from 'constructs';
import { IDestination } from './destination';
/**
 * (experimental) Represents a Kinesis Data Firehose delivery stream.
 *
 * @experimental
 */
export interface IDeliveryStream extends cdk.IResource, iam.IGrantable, ec2.IConnectable {
    /**
     * (experimental) The ARN of the delivery stream.
     *
     * @experimental
     * @attribute true
     */
    readonly deliveryStreamArn: string;
    /**
     * (experimental) The name of the delivery stream.
     *
     * @experimental
     * @attribute true
     */
    readonly deliveryStreamName: string;
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `actions`.
     *
     * @experimental
     */
    grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `firehose:PutRecord` and `firehose:PutRecordBatch` actions on this delivery stream.
     *
     * @experimental
     */
    grantPutRecords(grantee: iam.IGrantable): iam.Grant;
    /**
     * (experimental) Return the given named metric for this delivery stream.
     *
     * @experimental
     */
    metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;
}
/**
 * Base class for new and imported Kinesis Data Firehose delivery streams.
 */
declare abstract class DeliveryStreamBase extends cdk.Resource implements IDeliveryStream {
    abstract readonly deliveryStreamName: string;
    abstract readonly deliveryStreamArn: string;
    abstract readonly grantPrincipal: iam.IPrincipal;
    /**
     * (experimental) Network connections between Kinesis Data Firehose and other resources, i.e. Redshift cluster.
     *
     * @experimental
     */
    readonly connections: ec2.Connections;
    constructor(scope: Construct, id: string, props?: cdk.ResourceProps);
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `actions`.
     *
     * @experimental
     */
    grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `firehose:PutRecord` and `firehose:PutRecordBatch` actions on this delivery stream.
     *
     * @experimental
     */
    grantPutRecords(grantee: iam.IGrantable): iam.Grant;
    /**
     * (experimental) Return the given named metric for this delivery stream.
     *
     * @experimental
     */
    metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;
}
/**
 * (experimental) Properties for a new delivery stream.
 *
 * @experimental
 */
export interface DeliveryStreamProps {
    /**
     * (experimental) The destinations that this delivery stream will deliver data to.
     *
     * Only a singleton array is supported at this time.
     *
     * @experimental
     */
    readonly destinations: IDestination[];
    /**
     * (experimental) A name for the delivery stream.
     *
     * @default - a name is generated by CloudFormation.
     * @experimental
     */
    readonly deliveryStreamName?: string;
    /**
     * (experimental) The IAM role associated with this delivery stream.
     *
     * Assumed by Kinesis Data Firehose to read from sources and encrypt data server-side.
     *
     * @default - a role will be created with default permissions.
     * @experimental
     */
    readonly role?: iam.IRole;
}
/**
 * (experimental) A full specification of a delivery stream that can be used to import it fluently into the CDK application.
 *
 * @experimental
 */
export interface DeliveryStreamAttributes {
    /**
     * (experimental) The ARN of the delivery stream.
     *
     * At least one of deliveryStreamArn and deliveryStreamName must be provided.
     *
     * @default - derived from `deliveryStreamName`.
     * @experimental
     */
    readonly deliveryStreamArn?: string;
    /**
     * (experimental) The name of the delivery stream.
     *
     * At least one of deliveryStreamName and deliveryStreamArn  must be provided.
     *
     * @default - derived from `deliveryStreamArn`.
     * @experimental
     */
    readonly deliveryStreamName?: string;
    /**
     * (experimental) The IAM role associated with this delivery stream.
     *
     * Assumed by Kinesis Data Firehose to read from sources and encrypt data server-side.
     *
     * @default - the imported stream cannot be granted access to other resources as an `iam.IGrantable`.
     * @experimental
     */
    readonly role?: iam.IRole;
}
/**
 * (experimental) Create a Kinesis Data Firehose delivery stream.
 *
 * @experimental
 * @resource AWS::KinesisFirehose::DeliveryStream
 */
export declare class DeliveryStream extends DeliveryStreamBase {
    /**
     * (experimental) Import an existing delivery stream from its name.
     *
     * @experimental
     */
    static fromDeliveryStreamName(scope: Construct, id: string, deliveryStreamName: string): IDeliveryStream;
    /**
     * (experimental) Import an existing delivery stream from its ARN.
     *
     * @experimental
     */
    static fromDeliveryStreamArn(scope: Construct, id: string, deliveryStreamArn: string): IDeliveryStream;
    /**
     * (experimental) Import an existing delivery stream from its attributes.
     *
     * @experimental
     */
    static fromDeliveryStreamAttributes(scope: Construct, id: string, attrs: DeliveryStreamAttributes): IDeliveryStream;
    /**
     * (experimental) The name of the delivery stream.
     *
     * @experimental
     */
    readonly deliveryStreamName: string;
    /**
     * (experimental) The ARN of the delivery stream.
     *
     * @experimental
     */
    readonly deliveryStreamArn: string;
    /**
     * (experimental) The principal to grant permissions to.
     *
     * @experimental
     */
    readonly grantPrincipal: iam.IPrincipal;
    /**
     * @experimental
     */
    constructor(scope: Construct, id: string, props: DeliveryStreamProps);
}
export {};
